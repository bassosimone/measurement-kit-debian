#!/bin/sh

print_usage() {
    cat << EOF
usage: $0 dependency-name

Clones repository, configure, build and install dependency. By default sources
are below './third_party' and installed software is below './builtin/'.

Override default behavior by setting these environment variables:
  - pkg_clone_flags: extra flags for 'git clone' (e.g. '--recursive')
  - pkg_configure_flags: extra flags for './configure' (if any)
  - pkg_cmake_flags: extra flags for 'cmake .' (if CMakeLists.txt exists)
  - pkg_make_flags: extra flags for 'make' (e.g. 'V=0')
  - pkg_prefix: prefix where to install (e.g. '/usr/local')
  - pkg_make_install_flags: extra flags for 'make install' (e.g. DESTDIR=/opt)
  - pkg_sudo: optional comand to execute 'make install' with (e.g. sudo)

Examples:
  - download, patch, compile, and install libevent at /opt:
    - pkg_sudo=sudo pkg_prefix=/opt ./build/dependency libevent
  - use four processors to compile libressl:
    - pkg_make_flags=-j4 ./build/dependency libressl
EOF
}

set -e
if [ $# -ne 1 ]; then
    print_usage
    exit 1
fi
pkg_rootdir=$(cd $(dirname $(dirname $0)) && pwd -P)
if [ -z "$pkg_prefix" ]; then
    pkg_prefix=$pkg_rootdir/builtin
fi
export pkg_prefix
cd $pkg_rootdir
if [ -x build/spec/$1 ]; then
    exec build/spec/$1  # If the spec is executable, pass control to it
fi
# Note that the spec has access to $pkg_rootdir
. build/spec/$1
if [ ! -d third_party/cache/$pkg_name ]; then
    git clone $pkg_clone_flags $pkg_repository third_party/cache/$pkg_name
fi
if [ ! -d third_party/build/ ]; then
    mkdir third_party/build/
fi
rm -rf third_party/build/$pkg_name
cp -R third_party/cache/$pkg_name third_party/build/$pkg_name
cd third_party/build/$pkg_name
if [ ! -z "$pkg_branch" ]; then
    git checkout $pkg_branch
fi
if [ ! -z "$pkg_tag" ]; then
    git checkout tags/$pkg_tag
fi
if [ -x ./autogen.sh ]; then
    ./autogen.sh
elif [ -f ./configure.ac ]; then
    autoreconf -i
fi
if [ -d ../../../build/patch/$pkg_name ]; then
    for diff in `ls ../../../build/patch/$pkg_name`; do
        cp ../../../build/patch/$pkg_name/$diff .
        git apply -v $diff
        rm $diff
    done
fi
if [ -x ./configure ]; then
    ./configure --prefix=$pkg_prefix $pkg_configure_flags
elif [ -f ./CMakeLists.txt ]; then
    cmake -D CMAKE_INSTALL_PREFIX=$pkg_prefix $pkg_cmake_flags .
fi
make $pkg_make_flags
$pkg_sudo make $pkg_make_install_flags install
